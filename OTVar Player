# MenuTitle: OTVar Player
# -*- coding: utf-8 -*-
from __future__ import division, print_function, unicode_literals
__doc__ = """
Plays a glyph in Preview with multiple axis sliders.
"""

import vanilla
import os
import objc
from AppKit import NSTimer
from GlyphsApp import Glyphs, GSInstance, INSTANCETYPESINGLE
from mekkablue import mekkaObject


class OTVarGlyphAnimator(mekkaObject):
    prefDict = {
        "delay": 0.05,
        "backAndForth": True,  # Default option is set to checked
    }

    def __init__(self):
        # Get current font and axes
        self.font = Glyphs.font
        self.axes = self.getFontAxes()

        # Window 'self.w':
        windowWidth = 340
        windowHeight = 50 + len(self.axes) * 40  # Adjust height based on the number of axes
        self.w = vanilla.FloatingWindow(
            (windowWidth, windowHeight),  # default window size
            "OTVar Player",  # window title
            autosaveName=self.domain("mainwindow")  # stores last window position and size
        )
        self.previewInstances = None

        # Create sliders dynamically for each axis
        self.sliders = []
        self.sliderValues = []
        for i, axis in enumerate(self.axes):
            # Slider
            self.sliders.append(vanilla.Slider((15, 20 + i * 40, 285, 15), tickMarkCount=None, callback=self.redrawPreview, continuous=True, minValue=0, maxValue=100))
            setattr(self.w, f'slider_{i}', self.sliders[-1])
            # Text box to show numeric value
            self.sliderValues.append(vanilla.TextBox((310, 20 + i * 40, 40, 15), "0", sizeStyle="small"))
            setattr(self.w, f'slider_value_{i}', self.sliderValues[-1])

        # Run Button:
        self.w.runButton = vanilla.Button((-95, -35, -15, -15), "Play", callback=self.togglePlay)
        self.w.runButton.getNSButton().setToolTip_("Toggle Play/Pause")
        self.w.setDefaultButton(self.w.runButton)

        # Load Settings:
        self.LoadPreferences()

        self.direction = 1
        self.originalAxisValues = None
        self.isPlaying = False
        self.setupWindow()  # to init self.previewInstances
        if self.font.instances:
            try:
                self.originalAxisValues = self.previewInstances.axes[:]
            except:
                self.originalAxisValues = [instance.weightValue for instance in self.font.instances]

        self.w.bind("close", self.restoreFont)

        # open and initialize the preview area at the bottom
        self.redrawPreview(None)

        # Open window and focus on it:
        self.w.open()
        self.w.makeKey()

    def getFontAxes(self):
        """Retrieve the axes from the current font (works for Glyphs 3 and Glyphs 2)."""
        try:
            return [axis.name for axis in self.font.axes]
        except:
            # Fallback for Glyphs 2
            return ["Weight"]

    def windowIsClosing(self):
        try:
            self.isPlaying = False
            return True
        except Exception as e:
            Glyphs.clearLog()
            Glyphs.showMacroWindow()
            print(e)
            print()
            import traceback
            print(traceback.format_exc())
            return False

    def SavePreferences(self, sender):
        try:
            for i, slider in enumerate(self.sliders):
                Glyphs.defaults[self.domain(f"slider_{i}")] = slider.get()
            Glyphs.defaults[self.domain("backAndForth")] = self.w.backAndForth.get()
        except:
            return False
        return True

    def LoadPreferences(self):
        try:
            for i, slider in enumerate(self.sliders):
                Glyphs.registerDefault(self.domain(f"slider_{i}"), 0)
                slider.set(self.prefFloat(f"slider_{i}"))
            Glyphs.registerDefault(self.domain("delay"), 0.05)
            Glyphs.registerDefault(self.domain("backAndForth"), True)  # Default value set to True
            self.w.backAndForth.set(self.prefBool("backAndForth"))
        except:
            return False
        return True

    def setupWindow(self):
        if not self.font.tabs:
            tabText = "a"
            if self.font.selectedLayers:
                tabText = "".join([layer.parent.name for layer in self.font.selectedLayers])
            self.font.newTab(tabText)
        if self.font.currentTab.previewHeight <= 1.0:
            self.font.currentTab.previewHeight = 200
        previewInstances = None
        for instance in self.font.instances:
            if instance.type == INSTANCETYPESINGLE:
                previewInstances = instance
                break
        if not previewInstances:
            previewInstances = GSInstance()
            previewInstances.name = "Preview Instance"
            self.font.instances.append(previewInstances)
        self.font.currentTab.previewInstances = previewInstances
        self.previewInstances = previewInstances

    def restoreFont(self, sender):
        if self.originalAxisValues is not None:
            try:
                self.previewInstances.axes = self.originalAxisValues[:]
            except:
                self.previewInstances.weightValue = self.originalAxisValues[0]

        else:
            self.font.instances = []

        # turn playing off when window is closed, otherwise it goes on forever:
        self.isPlaying = False

        # reset sliders and redraw the preview area:
        for slider in self.sliders:
            slider.set(0)
        self.redrawPreview(None)

    def redrawPreview(self, sender):
        if self.previewInstances is None:
            return
        try:
            # Update each axis based on the slider positions
            for i, slider in enumerate(self.sliders):
                sliderPos = slider.get() / 100.0
                axisValues = [m.axes[i] for m in self.font.masters]
                minVal = min(axisValues)
                maxVal = max(axisValues)
                axisValue = minVal + sliderPos * (maxVal - minVal)
                self.previewInstances.axes[i] = axisValue

                # Update the text box with the slider value
                self.sliderValues[i].set(f"{int(axisValue)}")

            # Apply changes and update the preview
            self.previewInstances.updateInterpolationValues()
            self.font.currentTab.updatePreview()
        except Exception as e:
            Glyphs.showMacroWindow()
            print("OTVar Glyph Animator Error: %s" % e)
            import traceback
            print(traceback.format_exc())

    def togglePlay(self, sender):
        self.w.makeKey()
        self.isPlaying = not self.isPlaying
        if self.isPlaying:
            self.w.runButton.setTitle("Pause")
            self.setupWindow()
            self.play_(None)
        else:
            self.w.runButton.setTitle("Play")

    def play_(self, sender):
        try:
            if not self.prefBool("backAndForth"):
                self.direction = 1

            # finer steps when played slowly:
            smoothnessFactor = 1
            if self.prefFloat("delay") > 0.07:
                smoothnessFactor = 3
            elif self.prefFloat("delay") > 0.05:
                smoothnessFactor = 2

            # execute an animation step:
            if self.isPlaying:
                for i, slider in enumerate(self.sliders):
                    sliderPos = slider.get()
                    if sliderPos >= 100:
                        if not self.prefBool("backAndForth"):
                            sliderPos = 0
                        else:
                            sliderPos = 99.9999
                            self.direction = -1
                    elif sliderPos <= 0:
                        sliderPos = 0.0001
                        if self.direction == -1:
                            self.direction = 1
                    else:
                        sliderPos += self.direction * 2.0 / smoothnessFactor
                    slider.set(sliderPos)

                # Trigger Redraw:
                self.redrawPreview(None)
                self.font.currentTab.updatePreview()

                # Call this method again after a delay:
                playSignature = objc.selector(self.play_, signature=b'v@:')
                self.timer = NSTimer.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
                    self.prefFloat("delay") / smoothnessFactor,  # interval
                    self,  # target
                    playSignature,  # selector
                    None,  # userInfo
                    False  # repeat
                )
        except Exception as e:
            Glyphs.showMacroWindow()
            print("OTVar Glyph Animator Error: %s" % e)
            import traceback
            print(traceback.format_exc())


OTVarGlyphAnimator()
